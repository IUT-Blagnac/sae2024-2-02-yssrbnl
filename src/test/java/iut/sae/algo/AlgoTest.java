package iut.sae.algo;

import junit.framework.TestCase;
import org.junit.Test;

public class AlgoTest extends TestCase {

    /*
     * RLE("")=""
     * RLE("abc")="1a1b1c"
     * RLE("abbccc")="1a2b3c"
     * RLE("aaabaa")="3a1b2a"
     * RLE("aAa")="1a1A1a"
     */
    @Test
    public void testRLE() {
        assertEquals("", Algo.RLE(""));
        assertEquals("1a1b1c", Algo.RLE("abc"));
        assertEquals("1a2b3c", Algo.RLE("abbccc"));
        assertEquals("3a1b2a", Algo.RLE("aaabaa"));
        assertEquals("1a1A1a", Algo.RLE("aAa"));
        assertEquals("9W4W", Algo.RLE("WWWWWWWWWWWWW"));
    }

    /*
     * RLE(str, 1)=RLE(str)
     * RLE(str, 3)=RLE(RLE(RLE(str)))
     */
    @Test
    public void testRLERecursif(){
        try{
            assertEquals("", Algo.RLE("", 1));
            assertEquals("", Algo.RLE("", 3));

            assertEquals("1a1b1c", Algo.RLE("abc", 1));
            assertEquals("1a2b3c", Algo.RLE("abbccc", 1));
            assertEquals("3a1b2a", Algo.RLE("aaabaa", 1));
            assertEquals("1a1A1a", Algo.RLE("aAa", 1));

            assertEquals("111a111b111c", (Algo.RLE("abc", 2)));
            assertEquals("311a311b311c", (Algo.RLE("abc", 3)));

            String saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o";
            assertEquals(saeIte20, Algo.RLE("SAE Algo", 20));
        }
        catch(Exception e){
            fail("Exception inatendue");
        }
    }
    /*
     * unRLE(RLE(str))=str
     *
     * unRLE("")=""
     * unRLE("1a1b1c")="abc"
     * unRLE("1a2b3c")="abbccc"
     * unRLE("3a1b2a")="aaabaa"
     * unRLE("1a1A1a")="aAa"
     */
    @Test
    public void testUnRLE() {
        try {
            assertEquals("", Algo.unRLE(""));
            assertEquals("abc", Algo.unRLE("1a1b1c"));
            assertEquals("abbccc", Algo.unRLE("1a2b3c"));
            assertEquals("aaabaa", Algo.unRLE("3a1b2a"));
            assertEquals("aAa", Algo.unRLE("1a1A1a"));
            assertEquals("WWWWWWWWWWWWW", Algo.unRLE("9W4W"));
        } catch (Exception e) {
            fail("Exception inattendue");
        }
    }

    @Test
    public void testUnRLERecursif() {
        try {
            assertEquals("", Algo.unRLE("", 1));
            assertEquals("", Algo.unRLE("", 3));

            assertEquals("abc", Algo.unRLE("1a1b1c", 1));
            assertEquals("abbccc", Algo.unRLE("1a2b3c", 1));
            assertEquals("aaabaa", Algo.unRLE("3a1b2a", 1));
            assertEquals("aAa", Algo.unRLE("1a1A1a", 1));

            assertEquals("abc", Algo.unRLE("111a111b111c", 2));
            assertEquals("abc", Algo.unRLE("311a311b311c", 3));
        } catch (Exception e) {
            fail("Exception inattendue" + e);
        }
    }

    /*
     * Tests suppl√©mentaires
     */
    @Test
    public void testRLEWithSpecialCharacters() {
        assertEquals("1!1@1#1$", Algo.RLE("!@#$"));
        assertEquals("1a1!1b1@1c1#", Algo.RLE("a!b@c#"));
    }

    @Test
    public void testRLEWithNumbers() {
        assertEquals("1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z",
                Algo.RLE("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
    }

    @Test
    public void testUnRLEWithSpecialCharacters() throws AlgoException {
        assertEquals("!@#$", Algo.unRLE("1!1@1#1$"));
        assertEquals("a!b@c#", Algo.unRLE("1a1!1b1@1c1#"));
    }

    @Test
    public void testUnRLEWithNumbers() throws AlgoException {
        assertEquals("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                Algo.unRLE("1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z"));
    }

    @Test
    public void testRLEWithLongStrings() {
        String longString = new String(new char[1000]).replace("\0", "a");
        String expectedRLE = new String(new char[111]).replace("\0", "9a") + "1a";
        assertEquals(expectedRLE, Algo.RLE(longString));
    }

    @Test
    public void testUnRLEWithLongStrings() throws AlgoException {
        String expectedString = new String(new char[1000]).replace("\0", "a");
        String longRLE = new String(new char[111]).replace("\0", "9a") + "1a";
        assertEquals(expectedString, Algo.unRLE(longRLE));
    }

}
